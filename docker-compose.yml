# new
services:
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: 'no'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9093'
    ports:
      - 8080:8080
    depends_on:
      - kafka

  db:
    container_name: pg_my_db
    image: postgres:16.0
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=talkToILTS
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nest-microservices-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181:2181'
    networks:
      - nest-microservices-network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: 'audit-log:1:1,api-log:1:1'
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    networks:
      - nest-microservices-network

  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    container_name: auth_service
    command: npm run start:dev auth
    depends_on:
      - db
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '4000:4000'
    networks:
      - nest-microservices-network
    restart: unless-stopped

  tutorial:
    build:
      context: .
      dockerfile: ./apps/tutorial/Dockerfile
    container_name: tutorial_service
    command: npm run start:dev tutorial
    depends_on:
      - db
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '4001:4001'
    networks:
      - nest-microservices-network

volumes:
  postgres-data: # Ensure the volume name matches the reference in the db service

networks:
  nest-microservices-network:
    driver: bridge
# lastt

# version: '3.8'
# services:
#   kafka-ui:
#     container_name: kafbat-ui
#     image: ghcr.io/kafbat/kafka-ui:latest
#     ports:
#       - 8080:8080
#     environment:
#       DYNAMIC_CONFIG_ENABLED: 'true'
#       KAFKA_CLUSTERS_0_NAME: wizard_test
#       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
#     networks:
#       - nest-microservices-network

#   # db:
#   #   container_name: pg_my_db
#   #   image: postgres:16.0
#   #   ports:
#   #     - '5432:5432'
#   #   environment:
#   #     - POSTGRES_USER=postgres
#   #     - POSTGRES_PASSWORD=postgres
#   #     - POSTGRES_DB=talkToILTS
#   #   volumes:
#   #     - postgres-data:/var/lib/postgresql/data
#   #   networks:
#   #     - nest-microservices-network

#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - '2181:2181'
#     networks:
#       - nest-microservices-network

#   kafka:
#     image: wurstmeister/kafka:2.13-2.8.1
#     container_name: kafka
#     environment:
#       KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
#       KAFKA_LISTENER_NAME: PLAINTEXT
#       KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
#       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#       KAFKA_ZOOKEEPER_CONNECT_TIMEOUT_MS: 10000
#     ports:
#       - '9093:9093'
#       - '9997:9997'
#     depends_on:
#       - zookeeper
#     networks:
#       - nest-microservices-network

#   kafka-init-topics:
#     image: confluentinc/cp-kafka:7.2.1
#     volumes:
#       - ./data/message.json:/data/message.json
#     depends_on:
#       - kafka
#     command: >
#       bash -c 'echo Waiting for Kafka to be ready... && \
#       cub kafka-ready -b kafka:29092 1 30 && \
#       kafka-topics --create --topic users --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
#       kafka-topics --create --topic messages --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
#       kafka-console-producer --bootstrap-server kafka:29092 --topic users < /data/message.json'

# networks:
#   nest-microservices-network:
#     driver: bridge

# volumes:
#   postgres-data:

# #https://github.com/skylvr1289/sample_kafka
# version: '2'
# services:
#   # Zookeeper, single node
#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000
#     ports:
#       - 2181:2181
#       - 2888:2888
#       - 3888:3888

#   # kafka single node
#   kafka:
#     image: wurstmeister/kafka:latest
#     restart: 'no'
#     links:
#       - zookeeper
#     ports:
#       - 9092:9092
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
#       KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#       #https://github.com/wurstmeister/kafka-docker/issues/553

#   #kafdrop for topic/msg visualization
#   kafdrop:
#     image: obsidiandynamics/kafdrop
#     restart: 'no'
#     environment:
#       KAFKA_BROKERCONNECT: 'kafka:29092'
#       # JVM_OPTS: "-Xms16M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
#     ports:
#       - 9000:9000
#     depends_on:
#       - kafka
